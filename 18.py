import os
import logging
from dotenv import load_dotenv
from binance.client import Client
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
from telegram.constants import ParseMode
import matplotlib.pyplot as plt
from io import BytesIO


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')
TELEGRAM_API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Binance
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

# –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
TOP_CRYPTO_PAIRS = [
    'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT', 'LTCUSDT',
    'XRPUSDT', 'DOGEUSDT', 'DOTUSDT', 'TRXUSDT', 'AVAXUSDT'
]

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¢–æ–ø-20 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
# TOP_CRYPTO_PAIRS = [
#     'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT',
#     'XRPUSDT', 'DOGEUSDT', 'MATICUSDT', 'DOTUSDT', 'ATOMUSDT',
#     'LTCUSDT', 'AVAXUSDT', 'LINKUSDT', 'SHIBUSDT', 'TRXUSDT',
#     'MKRUSDT', 'FLOKIUSDT', 'SANDUSDT', 'AAVEUSDT', 'CRVUSDT'


# –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
PERIODS = ['5m', '15m', '30m', '1h', '6h', '12h', '1d', '3d', '1w', '1M']

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é)
main_keyboard = [
    [InlineKeyboardButton("üìä –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data="top_pairs")],
    [InlineKeyboardButton("üí¨ –ü–æ–º–æ—â—å", callback_data="help")],
]


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è RSI

def calculate_rsi(prices, period=14):
    if len(prices) < period:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI")

    gains = []
    losses = []
    for i in range(1, len(prices)):
        change = prices[i] - prices[i - 1]
        if change > 0:
            gains.append(change)
            losses.append(0)
        elif change < 0:
            gains.append(0)
            losses.append(-change)
        else:
            gains.append(0)
            losses.append(0)

    # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    avg_gain = sum(gains[:period]) / period
    avg_loss = sum(losses[:period]) / period

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö (EMA)
    for i in range(period, len(prices)):
        change = prices[i] - prices[i - 1]
        gain = max(change, 0)
        loss = -min(change, 0)

        avg_gain = (avg_gain * (period - 1) + gain) / period
        avg_loss = (avg_loss * (period - 1) + loss) / period

    if avg_loss == 0:
        return 100  # –ï—Å–ª–∏ –Ω–µ—Ç —É–±—ã—Ç–∫–æ–≤, RSI = 100

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è MACD

def calculate_macd(prices, short_period=12, long_period=26, signal_period=9):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è EMA
    def ema(prices, period):
        multiplier = 2 / (period + 1)
        ema_values = [sum(prices[:period]) / period]  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA = SMA
        for price in prices[period:]:
            ema_values.append((price - ema_values[-1]) * multiplier + ema_values[-1])
        return ema_values

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –¥–ª–∏–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
    short_ema = ema(prices, short_period)
    long_ema = ema(prices, long_period)

    # MACD: —Ä–∞–∑–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–π –∏ –¥–ª–∏–Ω–Ω–æ–π EMA (–Ω–∞—á–∏–Ω–∞—è —Å —Ç–æ—á–∫–∏, –≥–¥–µ –æ–±–µ EMA –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)
    macd_start = len(prices) - len(short_ema)
    macd = [s - l for s, l in zip(short_ema[macd_start:], long_ema)]

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∫–∞–∫ EMA –Ω–∞ –æ—Å–Ω–æ–≤–µ MACD
    signal_line = ema(macd, signal_period)

    return macd[-1], signal_line[-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MACD –∏ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    if user_id not in user_data:
        user_data[user_id] = {'selected_pair': 'BTCUSDT'}
        message = await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ RSI.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(main_keyboard)
        )

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        try:
            await update.message.pin()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=InlineKeyboardMarkup(main_keyboard)
        )

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
async def help_command(update: Update, context: CallbackContext) -> None:
    await update.callback_query.message.reply_text(
        "üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ **–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:**\n"
        "   –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üìä –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\", —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é).\n\n"
        "2Ô∏è‚É£ **–ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:**\n"
        "   –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã –±–æ—Ç –ø—Ä–æ–≤–µ–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º (5m, 15m, 1h, 1d –∏ –¥—Ä—É–≥–∏–µ). –í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "   - –¢–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.\n"
        "   - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä **RSI** (Relative Strength Index), –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞.\n"
        "   - –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: –ø–æ–∫—É–ø–∫–∞, –ø—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞.\n\n"
        "üìä *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n"
        "   - –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—É **BTCUSDT**.\n"
        "   - –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç, 1 —á–∞—Å, 1 –¥–µ–Ω—å –∏ —Ç.–¥.\n\n"
        "üí° *–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*\n"
        "- **RSI < 40** = **–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É** üü¢. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–∞, –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞.\n"
        "- **RSI > 70** = **–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É** üî¥. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–∞, –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è.\n"
        "- **RSI –º–µ–∂–¥—É 40 –∏ 70** = **–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞** üî∑. –ù–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç —è–≤–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
        "üîÑ *–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:*\n"
        "- RSI ‚Äî —ç—Ç–æ –ª–∏—à—å –æ–¥–∏–Ω –∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –∏ –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
        "- –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **/start** –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é
async def set_pair(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä—É
    if len(context.args) != 1:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /setpair <–ø–∞—Ä–∞>\n–ü—Ä–∏–º–µ—Ä: /setpair BTCUSDT"
        )
        return

    pair = context.args[0].upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –ø–∞—Ä–∞ –Ω–∞ Binance
    try:
        binance_client.get_symbol_ticker(symbol=pair)
        user_data[user_id] = {"selected_pair": pair}
        await update.message.reply_text(
            f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {pair}\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –ø–µ—Ä–∏–æ–¥–∞–º –¥–ª—è {pair}", callback_data="analyze_all_periods")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—ã {pair}: {str(e)}")
        await update.message.reply_text(f"‚ö†Ô∏è –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ {pair} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"
async def top_pairs(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton(pair, callback_data=f"pair_{pair}")] for pair in TOP_CRYPTO_PAIRS
    ]
    keyboard.append([InlineKeyboardButton("üî¢ –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data="manual_input")])  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é

    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≤—Ä—É—á–Ω—É—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é"
async def handle_manual_input(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    await update.callback_query.message.reply_text(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setpair <–ø–∞—Ä–∞>\n–ü—Ä–∏–º–µ—Ä: /setpair BTCUSDT"
    )
    user_data[user_id]["manual_input"] = True  # –û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä—É –≤—Ä—É—á–Ω—É—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def handle_button_click(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id

    if data == "help":
        await help_command(update, context)
    elif data == "top_pairs":
        await top_pairs(update, context)
    elif data == "manual_input":
        await handle_manual_input(update, context)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
    elif data.startswith("pair_"):
        selected_pair = data.split("_")[1]
        user_data[user_id] = {"selected_pair": selected_pair}

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É
        logger.info(f"User {user_id} selected pair {selected_pair}")

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—É {selected_pair}.")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –≤—Å–µ–º –ø–µ—Ä–∏–æ–¥–∞–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
        keyboard = [
            [InlineKeyboardButton(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –ø–µ—Ä–∏–æ–¥–∞–º –¥–ª—è {selected_pair}",
                                  callback_data="analyze_all_periods")]
        ]
        await query.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –ø–µ—Ä–∏–æ–¥–∞–º.",
                                       reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == "analyze_all_periods":
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∞–Ω–∞–ª–∏–∑–∞
        logger.info(f"User {user_id} requested analysis for {user_data[user_id].get('selected_pair')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä—É
        if user_id not in user_data or "selected_pair" not in user_data[user_id]:
            await query.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É.")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await analyze_all_periods(update, context)



# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
async def analyze_all_periods(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    pair = user_data[user_id]["selected_pair"]

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    await update.callback_query.answer(text="üîÑ –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=False)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await update.callback_query.message.edit_text(
        "üîÑ –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    chart_buf = generate_chart(pair)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    await update.callback_query.message.reply_photo(
        photo=chart_buf,
        caption="üìâ –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü"
    )
    try:
        results = {}
        for period in PERIODS:
            klines = binance_client.get_klines(symbol=pair, interval=period, limit=50)
            prices = [float(candle[4]) for candle in klines]  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ü–µ–Ω—ã
            rsi = calculate_rsi(prices)



            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
            macd, signal_line = calculate_macd(prices)
            macd_signal = ""

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ MACD
            if macd > signal_line:
                macd_signal = "üü¢ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (MACD –≤—ã—à–µ)"
            elif macd < signal_line:
                macd_signal = "üî¥ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (MACD –Ω–∏–∂–µ)"
            else:
                macd_signal = "üî∑ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ (MACD = )"

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI
            rsi_signal = ""
            if rsi < 40:
                rsi_signal = "üü¢ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É"
            elif rsi > 70:
                rsi_signal = "üî¥ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"
            else:
                rsi_signal = "üî∑ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"

            results[period] = {
                "macd": macd,
                "signal_line": signal_line,
                "macd_signal": macd_signal,
                "rsi": rsi,
                "rsi_signal": rsi_signal,
            }



        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 24 —á–∞—Å–∞
        try:
            price = binance_client.get_symbol_ticker(symbol=pair)
            ticker_24hr = binance_client.get_ticker(symbol=pair)

            volume = ticker_24hr['volume']
            price_change_percent = ticker_24hr['priceChangePercent']

            response = f"üìä *–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –ø–µ—Ä–∏–æ–¥–∞–º –¥–ª—è –ø–∞—Ä—ã {pair}:*\n\n"
            for period, data in results.items():
                response += (
                    f"üïí –ü–µ—Ä–∏–æ–¥: {period}\n"
                    f"   üìä RSI: {data['rsi']:.2f}\n"
                    f"   {data['rsi_signal']}\n"
                    f"   {data['macd_signal']}\n\n"
                )

            response += (
                f"üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {pair}: {price['price']} USDT\n"
                f"üîπ –û–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞: {volume} {pair[:3]}\n"
                f"üîπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞: {price_change_percent}%"
            )



            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = [
                [InlineKeyboardButton("üìä –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data="top_pairs")],
                [InlineKeyboardButton("üí¨ –ü–æ–º–æ—â—å", callback_data="help")],
            ]
            await loading_message.edit_text(response, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö 24hr –¥–ª—è {pair}: {str(e)}")
            await update.callback_query.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            await update.callback_query.message.reply_text(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ –≤—Å–µ–º –ø–µ—Ä–∏–æ–¥–∞–º –¥–ª—è {pair}: {str(e)}")
        await update.callback_query.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ –≤—Å–µ–º –ø–µ—Ä–∏–æ–¥–∞–º.")
        await update.callback_query.message.reply_text(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –º–∞–∫—Å–∏–º—É–º–∞–º–∏ –∏ –º–∏–Ω–∏–º—É–º–∞–º–∏
def generate_chart(pair):
    klines = binance_client.get_klines(symbol=pair, interval='1d', limit=30)
    dates = [kline[0] for kline in klines]
    prices = [float(kline[4]) for kline in klines]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    from datetime import datetime
    dates = [datetime.utcfromtimestamp(date / 1000).strftime('%Y-%m-%d') for date in dates]

    # –ù–∞–π–¥–µ–º –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
    max_price = max(prices)
    min_price = min(prices)
    max_index = prices.index(max_price)
    min_index = prices.index(min_price)

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))
    plt.plot(dates, prices, label=f'{pair} Price', color='b', marker='o')

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞ –∏ –º–∏–Ω–∏–º—É–º–∞
    plt.scatter(dates[max_index], max_price, color='g', label="–ú–∞–∫—Å–∏–º—É–º", zorder=5)
    plt.scatter(dates[min_index], min_price, color='r', label="–ú–∏–Ω–∏–º—É–º", zorder=5)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞ –∏ –º–∏–Ω–∏–º—É–º–∞
    plt.annotate(f"Max: {max_price:.2f}", (dates[max_index], max_price), textcoords="offset points", xytext=(0, 10),
                 ha='center', fontsize=10, color='g')
    plt.annotate(f"Min: {min_price:.2f}", (dates[min_index], min_price), textcoords="offset points", xytext=(0, -10),
                 ha='center', fontsize=10, color='r')

    plt.title(f'–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –¥–ª—è {pair} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–¶–µ–Ω–∞ (USDT)')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.legend()
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf


if __name__ == '__main__':
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setpair

    application = Application.builder().token(TELEGRAM_API_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setpair", set_pair))  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(CallbackQueryHandler(handle_button_click))

    application.run_polling()